<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>

<#@ output extension=".cs" #>

<#
var filePath=@"..\..\..\ClipboardWatcher\";
var fileName="ClipbordWatcherTypes";

string text = File.ReadAllText(this.Host.ResolvePath(filePath+fileName+".h"));
#>
//This code was generated from <#= fileName #> file data
namespace ClipboardHelper.Win32.<#= fileName #>
{
<#
	var enums=new Dictionary<string,List<string>>();


	var lines=text.Split(new[]{'\r','\n'});
	foreach (var line in lines){
		if(line.StartsWith("#define ")){
			var entry=CreateEnumEntry(line);
			if(entry==null)continue;
			if(!enums.ContainsKey(entry.Item1))
				enums[entry.Item1]= new List<string>();

			var items=enums[entry.Item1];
			items.Add(entry.Item2);
		}
	}
	foreach(var en in enums)
		WriteEnum(en.Key,en.Value);
#>
}

<#+
    private void WriteEnum(string name,List<string> values)
    {
		WriteEnumHeader(name);
		for (int i = 0; i < values.Count; i++)
			WriteEnumEntry(values[i],i);
		WriteBlockEnd();
    }
#>

<#+ private void WriteEnumEntry(string item,int index) {#>
	<#= item #>=<#= index #>,
<#+ }#>

<#+ private void WriteEnumHeader(string name) {#>

	public enum <#= name #>{
<#+ }#>

<#+ private void WriteBlockEnd() {#>}<#+ 
}
#>

<#+
	public Tuple<string,string> CreateEnumEntry(string line){
		int enumDefLenght=8;
		var enumLine=line.Substring(enumDefLenght,line.Length-enumDefLenght).Trim();
		var enumArgParts=enumLine.Split(new[]{'_'});

		if(enumArgParts.Length<2)return null;

		var textInfo=CultureInfo.InstalledUICulture.TextInfo;

		var enumName=enumArgParts[0];

		var builder= new StringBuilder();
		var enumArgPartsList= new List<string>();
		for (int i=1;i<enumArgParts.Length;i++){
			if(enumArgParts[i].Contains("=") || enumArgParts[i].Contains(" ")){
				builder.Append(enumArgParts[i].Split(new[]{'=',' '})[0]);
				break;
			}
			builder.Append(textInfo.ToTitleCase(enumArgParts[i]));
		}

		return Tuple.Create(enumName,builder.ToString());
	}

#>

